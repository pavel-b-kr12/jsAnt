<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>TjurmiteHQ webGL</title>
<script type="text/javascript" src="lib/dat.gui.min.js"></script>
<script src="lib/webgl-utils.js"></script>

<script src="lib/common.js"></script> 
<script src="lib/keyboard.js" defer></script> 
<script src="fill.js" defer></script> 
<script src="lib/recorder.js" defer></script> 
<script src="lib/elementPos.js" defer></script> 
<script src="notes.js" defer></script> 
<script> //settings
var ant_selected=null;

var ss={} //STORAGE to GET settings. object to fast get. DO NOT write here directly or URL and other will not update
var ssURL={} //COPY. to updata URL. DO NOT write here directly
var ssC={} //COPY. colorize. DO NOT write here directly

cccont={ //COPY. to store colorize in indexedDB. Need this to keep and get nm, without getAllKeys()
 ssC:ssC,
 nm:rand()
}

var bGUIupd=false;
function slider_set_v_tx(nmPart,v, tx){//console.log(nmPart+'_slider_txt',v,tx)
	$tx(nmPart+'_slider_txt', tx);
	if(!bGUIupd) return;
	$('slider_'+nmPart).value=v;
}
function btn_1_highlight(idPart, v){ //console.log(idPart+v)
	//if(!bGUIupd) return;
	btn_1_highlight_el($(idPart+v));
}
function btn_1_highlight_el(el){	//console.log(el)
	//if(!bGUIupd) return;
	el.classList.add('shrtcutBtn_sel');
	if(shrtcutBtn_last!=null) 
		shrtcutBtn_last.classList.remove('shrtcutBtn_sel');
	shrtcutBtn_last=el;
	
		//#TODO if ! selected group 1 return
	//class==grA
}
function select_set(idPart, v){	//console.log(idPart,v)
	if(!bGUIupd) return;
	$(idPart+'_sel').value=v;
}
var bNeed_URL_upd=true;
//##re nm to sst
var stt={ //object to SET settings and upd GUI
	set w(v){
		v=v==null?1024:parseInt(v);
		ss.w=v;
		ssURL.w=v;	bNeed_URL_upd=true;
	},
	set h(v){
		v=v==null?512:parseInt(v);
		ss.h=v;
		ssURL.h=v;	bNeed_URL_upd=true;
	},
	
	set xx(v){
		v=round(v,4);
		ss.xx=v;
		ssURL.xx=v;	bNeed_URL_upd=true;
							//if(isNaN(v) || isNaN(ss.xx))		console.log(v,ss.xx,console.trace());
	},
	set yy(v){
		v=round(v,4);
		ss.yy=v;
		ssURL.yy=v;	bNeed_URL_upd=true;
	},
	set zoom(v){ //^^ check if v!=ss.v 
		ss.zoom = v;
		ssURL.zoom = v;	bNeed_URL_upd=true;
		slider_set_v_tx('zoom', v, ss.zoom);		//console.log(v);//		console.log(v,ss.zoom,console.trace());
	},
	/*,
	get zoom() {
		return this.zoom_;
		console.log(this.zoom_);
	}*/
	set bAudioOFF(v){
		v=JSON.parse(v);
		ss.bAudioOFF=v;
		ssURL.bAudioOFF=v;	bNeed_URL_upd=true;

		bAudioOFF_updView();
	},
	set AudioFreqMul(v){
		ss.AudioFreqMul=parseFloat(v);
		ssURL.AudioFreqMul=v;	bNeed_URL_upd=true;
		
		slider_set_v_tx('AudioFreqMul', v, v);
	},
	set getFreq_mode(v){
		ss.getFreq_mode=v;
		ssURL.getFreq_mode=v;	bNeed_URL_upd=true;

		select_set('getFreq_mode', v);
	},
	

	
	set showArr(v){
		ss.showArr=v;
		ssURL.showArr=v;	bNeed_URL_upd=true;

		btn_1_highlight('showArr', v);
	},
	set hist_mode(v){
		ss.hist_mode=v;
		ssURL.hist_mode=v;	bNeed_URL_upd=true;

		select_set('hist_mode', v);
	},
	set hist_incr_mode(v){
		ss.hist_incr_mode=v;
		ssURL.hist_incr_mode=v;	bNeed_URL_upd=true;

		select_set('hist_incr_mode', v);
	},


	set speed(v){
		v=parseInt(v)
		ss.speed=v;
		ssURL.speed=v;	bNeed_URL_upd=true;

		slider_set_v_tx('speed',Math.pow(ss.speed,1/3), v);
	} ,
	set del_field_if_step_i(v){
		v=parseInt(v);
		ss.del_field_if_step_i=v;
		ssURL.del_field_if_step_i=v;	bNeed_URL_upd=true;

		slider_set_v_tx('del_field_if_step_i', v, v);
	},

//------- fill
	set fill_mode(v){
		ss.fill_mode=v;
		ssURL.fill_mode=v;	bNeed_URL_upd=true;

		select_set('fill_mode', v);
	},
	set bfill_clamp_to_max_colors(v){
		v=JSON.parse(v);
		ss.bfill_clamp_to_max_colors=v;
		ssURL.bfill_clamp_to_max_colors=v;	bNeed_URL_upd=true;
		ssC.bfill_clamp_to_max_colors=v;
		//## slider_set_v_tx('bfill_clamp_to_max_colors', v, ss.h_incr);
	},
	set color_max(v){//##
		v=parseInt(v);
		if(v<1)v=255;
		ss.color_max=v;
		ssURL.color_max=v;	bNeed_URL_upd=true;
		ssC.color_max=v;
		//## slider_set_v_tx('bfill_clamp_to_max_colors', v, ss.h_incr);
	},

	
	//------------ colorize
	set h_incr(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_incr=v;
		ssURL.h_incr=v;	bNeed_URL_upd=true;
		ssC.h_incr=v;
		slider_set_v_tx('h_incr', v, Math.pow(v,1/2));
	},
	set h_mul(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_mul=v;
		ssURL.h_mul=v;	bNeed_URL_upd=true;
		ssC.h_mul=v;
		slider_set_v_tx('h_mul', v, v*h_mul_mul.toString()); //TODO fix round(v*h_mul_mul,8) NaN // ? probably need upd view to h_mul_mul
	},
	set h_k0(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_k0=v;
		ssURL.h_k0=v;	bNeed_URL_upd=true;
		ssC.h_k0=v;
		slider_set_v_tx('h_k0', v, v);
	},
	set h_k1(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_k1=v;
		ssURL.h_k1=v;	bNeed_URL_upd=true;
		ssC.h_k1=v;
		slider_set_v_tx('h_k1', v, v);
	},
	set h_k2(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_k2=v;
		ssURL.h_k2=v;	bNeed_URL_upd=true;
		ssC.h_k2=v;
		slider_set_v_tx('h_k2', v, v);
	},
	set h_k3(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_k3=v;
		ssURL.h_k3=v;	bNeed_URL_upd=true;
		ssC.h_k3=v;
		slider_set_v_tx('h_k3', v, v);
	},
	set h_k4(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_k4=v;
		ssURL.h_k4=v;	bNeed_URL_upd=true;
		ssC.h_k4=v;
		slider_set_v_tx('h_k4', v, v);
	},
	set h_kBk(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_kBk=v;
		ssURL.h_kBk=v;	bNeed_URL_upd=true;
		ssC.h_kBk=v;
		slider_set_v_tx('h_kBk', v, v);
	},
	set h_kLi(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.h_kLi=v;
		ssURL.h_kLi=v;
		ssC.h_kLi=v;
		slider_set_v_tx('h_kLi', v, v);
	},
	set clamp_limit(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.clamp_limit=v;
		ssURL.clamp_limit=v;	bNeed_URL_upd=true;
		ssC.clamp_limit=v;
		slider_set_v_tx('clamp_limit', v, v);
		
		if(ss.clamp_limit==1) stt.clamp_rest=0.1; // to del default
	},
	set clamp_rest(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.clamp_rest=v;
		ssURL.clamp_rest=v;	bNeed_URL_upd=true;
		ssC.clamp_rest=v;
		slider_set_v_tx('clamp_rest', v, v);
	},
	
//---------------------------- audio
	set bfreq_cursor_toAnt(v){//TODO to ant id
		v=JSON.parse(v);
		ss.bfreq_cursor_toAnt=v;
		freq_cursor.o=v?ants[0]:freq_cursor_o_static;		console.log(freq_cursor.o)
	},
//----------------------------
	set x_anim(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.x_anim=v;
	},
	set y_anim(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.y_anim=v;
	},
	set z_anim(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.z_anim=v;
	},
	set x_anim_incr(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.x_anim_incr=v;
		bAnim_set();
	},
	set y_anim_incr(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.y_anim_incr=v;
		bAnim_set();
	},
	set z_anim_incr(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.z_anim_incr=v;
		bAnim_set();
	},
	
	set any_anim_incr(v){
		if(typeof v == 'string') v=parseFloat(v);
		ss.any_anim_incr=v;
		bAnim_set();
	},
	set any_anim_nm(v){
		ss.any_anim_nm=v;
	},
	set bAnim(v){
		ss.bAnim=JSON.parse(v);
		$('bAnim_sw').checked=ss.bAnim;
	},
	
};

function bAnim_set(){
 ss.bAnim= !(ss.x_anim_incr==0&&ss.y_anim_incr==0&&ss.z_anim_incr==0&&ss.any_anim_incr==0);
 $('bAnim_sw').checked=ss.bAnim;
}
function anim_incr_reset(){
 stt.x_anim_incr=0;
 stt.y_anim_incr=0;
 stt.z_anim_incr=0;
}

ssIncr={};//for anim
function addPrecise_setAnimateIncr(nm,v,bGUIupd_, animDeadZone,el)
{
	
	v=parseFloat(v);
	
	if(animDeadZone && Math.abs(v)<animDeadZone)
	{
		el.classList.add('defaultIncrValue');
		eeee=el
		return;
	}
	else el.classList.remove('defaultIncrValue');
	
	if(bGUIupd_) bGUIupd=true;
	stt[nm]=ss[nm]+v; //?? why range value string
	ssIncr[nm]=v;
	if(bGUIupd_) bGUIupd=false;
}


function ssC_defaultCopy()
{
o=
{
	h_incr:0.001, //dt
	h_mul:0.1,
	h_k0:1,
	h_k1:2/3, //hue rainbow colors positions
	h_k2:1/3,
	h_k3:3,
	h_k4:6,
	h_kBk:0,
	h_kLi:1,
	clamp_limit:1,
	clamp_rest:0,
}
return o;
}
function ssC_default_set()
{
 setSettings_GUIupd(ssC_defaultCopy())
}



function stt_default(){//##TODO del, use obj
bGUIupd=true;
stt.h=null;stt.w=null;

ss.bAnim=false;
stt.x_anim=0;
stt.y_anim=0;
stt.z_anim=0;
stt.x_anim_incr=0;
stt.y_anim_incr=0;
stt.z_anim_incr=0;
stt.any_anim_incr=0;
stt.any_anim_nm='h_k0';$('any_anim_nm_input').value='h_k0';

stt.zoom=1;
stt.bAudioOFF=false; //false true //do not init audio at start, but only after click Audio btn
stt.showArr='field';
stt.speed=100;  //TODO slow speed less than fps //TODO move to HTML
stt.AudioFreqMul=5; 
//TODO Audio volume
stt.xx=0;
stt.yy=0;
stt.hist_mode='';
stt.hist_incr_mode='';
stt.del_field_if_step_i=0;
stt.bfreq_cursor_toAnt=true;

//------ fill
stt.fill_mode='fill_0';
stt.bfill_clamp_to_max_colors=false;
stt.color_max=255;

bGUIupd=false;
}

//======================= URL
function URL_to_stt() {//https://stackoverflow.com/questions/8648892/how-to-convert-url-parameters-to-a-javascript-object
	bGUIupd=true;
	let entries=new URLSearchParams(window.location.search);
	for(let entry of entries) { // each 'entry' is a [key, value] tupple
		const [key, value] = entry;
		stt[key] = value;
	}
	bGUIupd=false;
}

var URL_upd_next_t=0;
function URL_upd()
{
 if(performance.now()<URL_upd_next_t) {
	bNeed_URL_upd=true;
	return;
 }
 bNeed_URL_upd=false;
 URL_upd_next_t=performance.now()+0.1;


 
 let url_str=new URLSearchParams(ssURL).toString();
 //https://stackoverflow.com/questions/6566456/how-to-serialize-an-object-into-a-list-of-url-query-parameters

 //del default values
 url_str=url_str.replace('\&bAudioOFF=false','');
 url_str=url_str.replace('\&del_field_if_step_i=0','');
 url_str=url_str.replace('\&hist_mode=0','');
 url_str=url_str.replace('\&hist_incr_mode=0','');
 url_str=url_str.replace('\&showArr=field','');
 url_str=url_str.replace('\&h_kBk=0','');
 url_str=url_str.replace('\&h_kLi=1','');
 url_str=url_str.replace('\&clamp_limit=1','');
 url_str=url_str.replace('\&clamp_rest=0.1','');
 url_str=url_str.replace('\&zoom=1','');
 url_str=url_str.replace('\&fill_mode=fill_0','');
 url_str=url_str.replace('\&bfill_clamp_to_max_colors=false','');
 url_str=url_str.replace('\&color_max=255','');
 //TODO newly added param default
 
 
 let ar=window.location.pathname.split('/');
 history.replaceState(null, null, ar[ar.length-1]+'?'+url_str); 
 //history.replaceState({}, null, 'webGL.htm?'+url_str);//TODO  move zoom do not upd pushState() immediately but after some timer to prevent flood of history  OR replace history replaceState()
} //https://stackoverflow.com/questions/824349/how-do-i-modify-the-url-without-reloading-the-page
//=======================
var tt={} //settings that no need to save

var bStop=true;
var fieldAdd=0;
var bAudioGen=false;

function load_settings() //not load presets. Presets that affect many parameters load only manually
{
	ssC_default_set();
	stt_default();	//restore default first
	URL_to_stt();
	
	////if(window.innerHeigh!==undefined)
	//{
	//h=window.innerHeigh>1200 ?1024:512; //console.log(window.innerHeigh, 'set stt.h:', ss.h);
	//w=window.innerWidth>1100 ?1024:512; //!TODO. this can be done after page load
	//}

	tt.wh=ss.w*ss.h;
	tt.xc=ss.w/2;
	tt.yc=ss.h/2;
	tt.xM=ss.w-1;
	tt.yM=ss.h-1;

	canvas.width=ss.w;
	canvas.height=ss.h;
	
	canvasPlot.width=512;
	canvasPlot.height=256;
	canvasPlotc = canvasPlot.getContext("2d");
	canvasPlotc.fillStyle = "#FF0000";



	field = new Uint8Array(tt.wh); //2D array [x][y] tested as slower https://stackoverflow.com/questions/1242705/performance-of-2-dimensional-array-vs-1-dimensional-array
	field_f= new Float32Array(tt.wh); //for ant_f

	arrHist = new Uint32Array(tt.wh); //step number
	arrVisits = new Uint32Array(tt.wh); //count

	arrHistDir_E = new Uint32Array(tt.wh); // +=this.dir;
	arrDir_last = new Uint8Array(tt.wh);  // =this.dir;
	arrHistDirAbs = new Uint8Array(tt.wh); // not overflowed by %4 (or %8)
	arrHist_rotSpeed = new Uint32Array(tt.wh);
	
	arrAntLastStepC = new Uint32Array(4096);
	arrSeq = new Uint8Array(tt.wh);
	
	texArr=new Float32Array(tt.wh); //Uint8Array

	//field.fill(4, 1, 3); //val, start, end

	// field =Array(ss.w).fill(Array(stt.h)); //Rows are copied by reference
	//https://stackoverflow.com/questions/1295584/most-efficient-way-to-create-a-zero-filled-javascript-array
}
</script>
<script src="ant.js"></script>
<style>
.pa {color: red;}

body{
 background-color: #fbefff;
}

.dropmenu {position: fixed; }
.shortcut{
	text-decoration: underline; 
	background-color: #ffeecc;
	text-transform: capitalize;/* affect innerText, but not .textContent */
}

/*#inf{width: 280px;}*/
fieldset {
	background-color: #fffbb9;
	/*width: min-content;*/
}

.flex{
 display: flex;
}
.buttons_panel{
    /*display: flex;
    align-items: flex-start;
    flex-direction: column;
    flex-wrap: wrap;*/
}

.footer {
  position:fixed;
  bottom:0px;
  z-index:99;
}

fieldset.off {
	background-color: #646474;
	/*color:#343338;*/
}
/*333351*/
legend {
	background-color: #bdbcbcad;

	/*color: white;*/
	/*border: aqua; 7efcff;*/
	/* border-width: 1px;*/
	/* border-style: solid;*/

	padding-inline-start: 0px;
	padding-inline-end: 0px;
}

.label
{
	padding: 6px 14px;
	font-size: large;
}
.r{float: right;}
.shrtcutBtn_sel
{
	background-color: #bdbcff;
}

input[type=checkbox]{
position: relative;
top: 2px;
}/*or parent vertical-align: middle;*/

#stop_sw{
    border-radius: 17px;
    background-color: #bebebe;
    color: #ffffff;
    font-size: 20px;
    border-width: 3px;
}
		
.defaultIncrValue{
	outline: solid 1px black;
	background-color:#aaa!important;
}


.pan {
  position: absolute;
  /*overflow: hidden;*/
}
/* Prevents inconsistent highlighting of element while being dragged*/
/*
.pan {
  -webkit-touch-callout: none;
    -webkit-user-select: none;
     -khtml-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
}
*/

/*
.shrtcutBtn:hover:after,.tip:hover:after{
	content: attr(title);
    position: absolute;
    padding: 8px;
    border: 1px solid green;
    background: #f5f5f500;
    font-size: 16px;
    top: 22px;
    display: inline;

}*/
.shrtcutBtn:hover:after,.tip:hover:after{
	content: attr(title);

	padding: 8px;
	border: 1px solid green;
	background: #96f1b28c;/*#ffaa55cc;*/
	font-size: 32px;

	display: inline;


	position:fixed;
	bottom:30px;
	left:30px;
	width: 100%;

}

input[type=range]{
-webkit-appearance: none;
background-color:#d4d4d4;
}
</style>
<style>
.w3-black, .w3-hover-black:hover {
	color: #fff!important;
	background-color: #515151/*#7b6d6d!important;*/
}
.w3-bar {
	width: 100%;
	overflow: hidden;
}
.w3-bar .w3-button {
	white-space: normal;
}

.w3-bar .w3-bar-item {
	padding: 3px 14px;
	float: left;
	width: auto;
	border: none;
	display: block;
	outline: 0;
}

.w3-btn {
	border: none;
	display: inline-block;
	padding: 6px 14px;
	vertical-align: middle;
	overflow: hidden;
	text-decoration: none;
	color: inherit;
	background-color: inherit;
	text-align: center;
	cursor: pointer;
	white-space: nowrap;
	box-shadow:0 5px 10px 0 rgba(0,0,0,0.2),0 4px 12px 0 rgba(0,0,0,0.19);
}

.w3-btn:hover {
  background-color: #cccccc!important;
  color: #333!important;
  border: none;
}

.w3-btn:active {
  background-color: #aaaaaa!important;
  color: #050!important;
  box-shadow: none;
  border: none;
}
</style>

</head>
<body>

<div class="panContainer">

<div class="pan">
ms walk+draw<br><i id="dtAnt"></i> + <i id="dtDraw"></i> <br>
dirAbs <i id='dirAbs'></i><br>
step <i id='step_i'></i><br>
rot speed <i id='rotSpeed'></i><br>
antrotSpeed <i id='antrotSpeed'></i><br>
frame_i <i id='il'></i><br>
dH/dStep <i id='dHdStep'></i><br>
dH/dFrame_i <i id='dHdFrame_i'></i><br>
AudioFreq of selected <i id='AudioFreq'></i><br>
<br>
freq_ <i id='freq_'></i><br>
freq_avg_ <i id='freq_avg_'></i><br>
ffx_ <i id='ffx_'></i><br>
frequency_ <i id='frequency_'></i><br>
</div>


<div class="buttons_panel footer">
<button onclick="$('canvas').requestFullscreen();">Fullscreen canvas</button>
<button onclick="window.location.replace(window.location.pathname)">reload empty settings</button> 
<button onclick="window.location.replace(window.location.pathname+'?w=1024&h=1024')">reload empty 1024*1024</button>
<button onclick="stt.w=1024;stt.h=1024;URL_upd();window.location.reload()">1024*1024</button>
<button onclick="stt.w=2048;stt.h=2048;URL_upd();window.location.reload()">2048*2048</button>
<button onclick="stt.w=2048;stt.h=2048;URL_upd();window.location.reload()">4096*4096</button>
<button onclick="stt.w=1024;stt.h=64;URL_upd();window.location.reload()">1024*64</button>
<button onclick="stt.w=1024;stt.h=32;URL_upd();window.location.reload()">1024*32</button>
<button onclick="stt.w=1024;stt.h=8;URL_upd();window.location.reload()">1024*8</button>
<button onclick="stt.w=1980;stt.h=1080;URL_upd();window.location.reload()">1980*1080 **wrap disabled: NPOT texure size</button>
<button onclick="stt.w=2560;stt.h=1440;URL_upd();window.location.reload()">2560*1440 **</button>
</div>


<div class="pan">
<button id='stop_sw' onclick="swStartStop()">Starten die Simulation<p class='pa'>or use keys ` 1...9 speed</p></button>
<button onclick="record(canvas);" title='t can be adj. Better use OBS'>REC video for 5 sec</button>
<button onclick="mediaRecorder.stop()">REC stop</button>
<a id='vDownload'></a>
<fieldset>
<legend style="border: 1px solid;">
<span class='label'>Display, data source</span>
</legend>
<br>
To view arrays of fieds press keyboard to データを選択:<br>
<button name='showArr' class='shrtcutBtn' tag='f' title='основное поле, данные которого используют アリ'>field</button>
<button name='showArr' class='shrtcutBtn' tag='h' title='step number номер шага последнего посещения'>arrHist</button>

<select id="hist_mode_sel" onchange="stt.hist_mode=value">
<option value="">hist[i]=step_i;//write history</option>
<option value="continue">if(hist[i]) step_i=hist[i];// continue history from arr</option>
<option value="continueNew">if(step_i&rt;hist[i]+1000) step_i=hist[i];// continue history from arr if it is not old</option>
<option value="avg">step_i=(arrHist[pos]+step_i)/2;// average history from arr</option>
</select>
<select id="hist_incr_mode_sel" onchange="stt.hist_incr_mode=value">
<option value="">++</option>
<option value="no">not increment</option>
<option value="unvisited">unvisited</option>
<option value="visited">visited</option>
<option value="visitOld">visitOld</option>
</select>

<br>
<button name='showArr' class='shrtcutBtn' tag='v' title='count количество посещений клетки'>arrVisits</button>
<button name='showArr' class='shrtcutBtn' tag='d' title='+=this.dir направление во время last visit'>arrDir_last</button>
<button name='showArr' class='shrtcutBtn' tag='e' title='=this.dir'>arrHistDir_E</button>
<button name='showArr' class='shrtcutBtn' tag='r' title='not overflowed by %4 (or %8)'>arrHistDirAbs</button>
<button name='showArr' class='shrtcutBtn' tag='s' title='s'>arrHist_rotSpeed</button>
<button name='showArr' class='shrtcutBtn' tag='j' title='detect same by last colors'>arrSeq</button>
<br>
<input id='slider_del_field_if_step_i' type="range" min="0" max="1000000" value="0" step='16' oninput='stt.del_field_if_step_i=value'> <i id='del_field_if_step_i_slider_txt'></i>k, delete field if step is older
<br>
<input id='slider_speed' type="range" min="0" max="200" value="10" oninput="stt.speed=Math.pow(this.value,3);"> <i id='speed_slider_txt'>sim </i> speed ops/Frame<br>
<input id='slider_zoom' type="range" min="0.1" max="2" value="1" step='0.01' oninput="stt.zoom=(value>0.8&&value<1.2)?1:value;" title='If dont move - see browser console for fix'> <i id='zoom_slider_txt'></i> zoom (bettter use mouse).<br>
<br><hr>
Colorization データの色化<br>
<script>
function colorizeSave(){
 let nm = prompt("preset unique name", rand());
 ssCs.push(
 {
	nm:nm,
	ssC:Object.assign({}, ssC)
 });
 localStorage.setItem('ssCs', JSON.stringify(ssCs));
}
function colorize_listAll(){
	let s=localStorage.getItem('ssCs');
	ssCs=s?JSON.parse(s):[{nm:'0',ssC:ssC_defaultCopy()}];
	let str='';
	for(let i=0;i<ssCs.length;i++){
		str+="<option value='"+ssCs[i].nm+"'>"+ssCs[i].nm+"</option>";
	}
	$('sel_colorize_set').innerHTML+=str;
}	
function colorize_set(nm){
	if(nm=='0'){
		ssC_default_set(); return;
	}
	
	for(let i=0;i<ssCs.length;i++){
		if(ssCs[i].nm===nm){
			setSettings_GUIupd(ssCs[i].ssC);
		}
	}
}
function setSettings_GUIupd(o){
 bGUIupd=true;
	Object.keys(o).forEach(function(key,index) {			
		stt[key]=o[key];
		// key: the name of the object key
		// index: the ordinal position of the key within the object 
	});
 bGUIupd=false;
}
</script>
presets (or bookmark this page):
<select id='sel_colorize_set' onchange="colorize_set(value);">
 <option value="0">default</option>
</select>
<button onclick='colorizeSave()'>save to browser DB</button>
<br>
modes, shaders:
<br>
<input id='slider_h_incr' type="range" min="0" max="0.5" value="0.001" step='0.0001' oninput="stt.h_incr=Math.pow(value,2)"> <i id='h_incr_slider_txt'></i> h_incr<br>

<input id='slider_h_mul' type="range" min="-0.5" max="20" value="0.2" step='0.001' oninput="stt.h_mul=value;">
<input type="range" min="-0.01" max="0.01" value="0" step='0.0001' oninput='addPrecise_setAnimateIncr("h_mul",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='h_mul_slider_txt'></i> h_mul
<br>
<input id='slider_h_k0' type="range" min="-0.5" max="2" value="1" step='0.01' oninput="stt.h_k0=value;">
<input type="range" min="-0.001" max="0.001" value="0" step='0.00001' oninput='addPrecise_setAnimateIncr("h_k0",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='h_k0_slider_txt'></i> h_k0 ? 1
<br>
<input id='slider_h_k1' type="range" min="-0.5" max="2" value="2/3" step='0.01' oninput="stt.h_k1=value;">
<input type="range" min="-0.001" max="0.001" value="0" step='0.00001' oninput='addPrecise_setAnimateIncr("h_k1",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='h_k1_slider_txt'></i> h_k1 ? 2/3
<br>
<input id='slider_h_k2' type="range" min="-0.5" max="2" value="1/3" step='0.01' oninput="stt.h_k2=value">
<input type="range" min="-0.001" max="0.001" value="0" step='0.00001' oninput='addPrecise_setAnimateIncr("h_k2",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='h_k2_slider_txt'></i> h_k2 ? 1/3
<br>
<input id='slider_h_k3' type="range" min="-0.5" max="2" value="3" step='0.01' oninput="stt.h_k3=value">
<input type="range" min="-0.001" max="0.001" value="0" step='0.00001' oninput='addPrecise_setAnimateIncr("h_k3",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='h_k3_slider_txt'></i> h_k3 ? 3
<br>
<input id='slider_h_k4' type="range" min="-0.5" max="20" value="6" step='0.01' oninput="stt.h_k4=value">
<input type="range" min="-0.001" max="50" value="0" step='0.00001' oninput='addPrecise_setAnimateIncr("h_k4",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='h_k4_slider_txt'></i> h_k4 mul TODO pow
<br>
<input id='slider_h_kBk' type="range" min="0" max="0.9" value="0" step='0.01' oninput="stt.h_kBk=value"> <i id='h_kBk_slider_txt'></i> h_kBk black point
<br>
<input id='slider_h_kLi' type="range" min="0.1" max="1" value="1" step='0.01' oninput="stt.h_kLi=value"> <i id='h_kLi_slider_txt'></i> h_kLi light
<br>
<input id='slider_clamp_limit' type="range" min="0.01" max="1" value="1" step='0.01' oninput="stt.clamp_limit=value">
<input type="range" min="-0.001" max="0.001" value="0" step='0.00001' oninput='addPrecise_setAnimateIncr("clamp_limit",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='clamp_limit_slider_txt'></i> clamp_limit if c&rtlimit c= rest
<br>
<input id='slider_clamp_rest' type="range" min="0" max="1" value="0.2" step='0.01' oninput="stt.clamp_rest=value">
<input type="range" min="-0.001" max="0.001" value="0" step='0.00001' oninput='addPrecise_setAnimateIncr("clamp_rest",value,true,this.max*0.05,this)' class='defaultIncrValue'> <i id='clamp_rest_slider_txt'></i> fill clamp_rest
<br>
<!-- TODO precossion -->

</fieldset>
</div>

<div class="pan">
<fieldset>
<legend style="border: 1px solid; width:500px;" class='tip' title="technically it is not a camera, but tex move">Animate</legend>
<input id='bAnim_sw' type="checkbox" oninput="stt.bAnim=checked" name='shrtcutBtnm' tag='m' title='press m to pause'>bAni<b class=shortcut>m</b>
<button name='shrtcutBtnn' onclick='anim_incr_reset()' tag='n'>reset incr press:<b class=shortcut>n</b></button>
<button onclick='reset_xyz()'>reset view xyz</button>
<br>
x+=<input id='slider_x_anim_incr' type="range" min="-0.01" max="0.01" value="0" step='0.00001' oninput="let v=(value>-5/10000&&value<5/10000)?0:value;stt.x_anim_incr=v;this.style.backgroundColor=v==0?'#aaa':'#d4d4d4';"> <i id='x_anim_incr_slider_txt'></i>
<br>
y+=<input id='slider_y_anim_incr' type="range" min="-0.01" max="0.01" value="0" step='0.00001' oninput="let v=(value>-5/10000&&value<5/10000)?0:value;stt.y_anim_incr=v;this.style.backgroundColor=v==0?'#aaa':'#d4d4d4';"> <i id='y_anim_incr_slider_txt'></i> <br>
z+=<input id='slider_z_anim_incr' type="range" min="-0.01" max="0.01" value="0" step='0.00001' oninput="let v=(value>-5/10000&&value<5/10000)?0:value;stt.z_anim_incr=v;this.style.backgroundColor=v==0?'#aaa':'#d4d4d4';"> <i id='z_anim_incr_slider_txt'></i> <br>
<input type="text" id='any_anim_nm_input' oninput="stt.any_anim_nm=value">+=<input id='slider_any_anim_incr' type="range" min="-100" max="100" value="0" oninput="let v=(value>-5&&value<5)?0:value;stt.any_anim_incr=v;this.style.backgroundColor=v==0?'#bbb':'#d4d4d4';"> <br>

<br>
<!-- TODO better make sel list of any_anim_nm -->
<br>
</fieldset>
</div>


<div class="pan">
<fieldset>
<legend style="border: 1px solid; width:500px;">
<span class='label'>settings of current 蟻</span><select id="new_antFunc_sel" onclick="select_ant(this)" class="dropmenu"></select><span class='r w3-bar-item w3-btn' onclick="new_ant(ant)">new_ant</span><span class='r w3-bar-item w3-btn' onclick="new_ant(ant_f)">new_ant float</span>
</legend>
<input id='sliderdirM_L' type="range" min="2" max="100" value="3" oninput="dirM_L=Math.min(this.value,dirM); $tx('sliderdirM_L_txt', dirM_L)">
<i id='sliderdirM_L_txt'>3</i>dirM_L max dir when turn left, 3 by default, cant be more than dirM<br>

<input id='sliderdirM' type="range" min="2" max="100" value="3" oninput="dirM=Math.max(this.value,dirM_L); $tx('sliderdirM_txt', dirM)">
<i id='sliderdirM_txt'>3</i>dirM max dir when turn right, 3 by default<br>
<legend id='ant_f_settings' style="background-color: #dddddd;border: 1px solid">
<input id='slider_xAdd' type="range" min="-2" max="2" value="0.22" oninput="xAdd_set(value);"><i id='xAdd_slider_txt'>0.2</i>xAdd<br>
<input id='slider_xSub' type="range" min="-2" max="2" value="0.22" oninput="xSub_set(value);"><i id='sxSub_slider_txt'>0.2</i>xSub<br>
<input id='slider_yAdd' type="range" min="-2" max="2" value="0.22" oninput="yAdd_set(value);"><i id='yAdd_slider_txt'>0.2</i>yAdd<br>
<input id='slider_ySub' type="range" min="-2" max="2" value="0.22" oninput="ySub_set(value);"><i id='ySub_slider_txt'>0.2</i>ySub<br>
<input id='add_sub' type="checkbox" > link add_sub
<input id='x_y' type="checkbox" > link x_y
<script>
//##upd this code:
function xAdd_set(v){
	ant_selected.xAdd=v;		$tx('slide_xAdd_txt', v.toFixed(2));
	
	let add_sub=$('add_sub').checked;
	let x_y=$('x_y').checked;
	
	if(add_sub) xSub_set(v, true);
	if(x_y) yAdd_set(v, true);
	//if(add_sub&&x_y) {ant_selected.ySub=v;	$('slider_ySub').value=$('slider_xAdd').value}
}
function xSub_set(v, bSetRangeValue){
	if( bSetRangeValue)$('slider_xSub').value=v;
	ant_selected.xSub=v;		$tx('slide_xSub_txt', v.toFixed(2));
	
	
	//let add_sub=$('add_sub').checked;
	let x_y=$('x_y').checked;
	
	if(x_y) ySub_set(v, true);
}
function yAdd_set(v, bSetRangeValue){
	if( bSetRangeValue)$('slider_yAdd').value=v;
	ant_selected.yAdd=v;		$tx('slide_yAdd_txt', v.toFixed(2));
	
	let add_sub=$('add_sub').checked;
	//let x_y=$('x_y').checked;
	
	if(add_sub) ySub_set(v, true);
}
function ySub_set(v, bSetRangeValue){
	if( bSetRangeValue)$('slider_ySub').value=v;
	ant_selected.ySub=v;		$tx('slide_ySub_txt', v.toFixed(2));
}
</script>
</legend>
<br style="display: block; margin: 4px 0; content:'';">antFunc <select id="antFunc_sel" onclick="setantFunc(this.value);URL_upd()" class="dropmenu"></select><br>
</fieldset>
</div>


<div class="pan">
<fieldset id='audio_panel'>
<legend>
<div class="w3-bar w3-black">
<button onclick="sw_bAudioOFF()" tag='a' title='click to toggle'>𝄞 ♫ <b class=shortcut>A</b>udio</button> 
</div>
</legend>

<input id='slider_AudioFreqMul' type="range" min="1" max="100" value="1" oninput="stt.AudioFreqMul=this.value"> <i id='AudioFreqMul_slider_txt'></i> AudioFreq Multiplyer<br>

<input id='bfreq_cursor_toAnt_sw' type="checkbox" oninput="stt.bfreq_cursor_toAnt=checked" checked>attach freq_cursor to ant<br>
Static freq_cursor pos:<p id='freq_cursor_xy_view'></p>
AudioFunc:<select id='getFreq_mode_sel' onChange='stt.getFreq_mode=value;'></select><br>
<button onclick='canvasPlotc.clearRect(0, 0, canvasPlot.width, canvasPlot.height);fxxs=new Float32Array(4096);'>clean spectre</button>
</fieldset>
<canvas id="canvasPlot" width="512" height="256" style="border:1px solid #000000;"></canvas>
</div>


<div class="pan">
<fieldset class='flex'>
<legend>
<div>
<button onclick="fill_field();arr_clear_all()" tag='x' ><b class=shortcut>X</b> Fill <b>field</b> with pattern, clear all</button>
<button onclick="arr_clear_all()" tag='c' ><b class=shortcut>C</b>lear all but <b>field</b></button>
</div>
</legend>
<div>
pattern:<br>
<canvas id="canvasFill" width="140px" height="140px"></canvas>
</div>
<div>
<input id='canvasFill_wE' type="range" min="1" max="8" value="2" oninput="canvasFill_wE=this.value;drawBox(); $tx('canvasFill_wE_txt', canvasFill_wE)"><i id='canvasFill_wE_txt'></i> w<br> 
<input id='canvasFill_hE' type="range" min="1" max="8" value="2" oninput="canvasFill_hE=this.value;drawBox(); $tx('canvasFill_hE_txt', canvasFill_hE)"><i id='canvasFill_hE_txt'></i> h<br>
TODO color to be same as in shader, same as in ant function<br>
<input id='slider_fieldAdd' type="range" min="-32" max="64" value="0" oninput="stt.fieldAdd=value"> add to field each <i id='fieldAdd_slider_txt'></i> turn. 0 is OFF<br>
<input id='sw_bfieldAdd_lim' type="checkbox" oninput="stt.bfieldAdd_lim=checked"> only if field in range 0...255<br>

<select id='fill_mode_sel' onChange='stt.fill_mode=value; fill_field();'></select>
</div>
</fieldset>
</div>


<div class="pan">
<canvas id='canvas'></canvas>
</div>

<div class="pan" style="padding: 20px;border: red;border-style: solid;">
<!-- <h1 style="position: absolute; left: 4px;">!</h1> -->
<li>hold Ctrl to move panels or check to drag: <input type='checkbox' oninput='bpanDragWOCtrl=checked'></li>
<button onclick='elementPos_reset()'>reset panels pos</button><br>
<li>если после старта ничего не видно и screen became black:<br> try to adjust h_mul or zoom or select colorization preset, <button onclick='reset_xyz()'>reset view xyz</button> or <button onclick="window.location.replace(window.location.pathname)">reload empty settings</button> </li>
<!-- <li>🔗 get link</li> -->
TODO:
<li>del indexedDB, use local storage JSON</li>
<li>[ ] investigate why pattern do not shown</li>
<li>[ ] load field</li>
<li>[ ] save localStorage to file</li>
<li>[ ] save img nm, load</li>
<li>[ ] save settings to img QR-code</li>
<li>[ ] negative speed</li>
<li>[ ] upd pattern from f, or list of pictures in select</li>
<li>[ ] dont flood URL untill ask of link</li>
</div>

</div>


<script> //init
window.onload=setup;

function setup(){
//-------- shrtcutBtn events
	let ar=document.getElementsByName('showArr'); //### groups
	for(let i=0;i<ar.length;i++)
	{
		let k=ar[i].attributes.tag.value;
		ar[i].addEventListener('click', shrtcutBtn_click);
		let K=k.toUpperCase(); //k is lower case
		let str=ar[i].innerText;
		ar[i].id=ar[i].name+str;
		Sortcuts_els[k]=ar[i];//to search el by key
		ksearch=(str.indexOf(K)==-1)?k:K; //if no UpperCase - search lower 		//TODO if no any - add k to element
		str=str.replace(ksearch, '<b class=shortcut>'+ksearch+'</b>'); //remain case. Show UpperCase via css if no UpperCase in string

		ar[i].innerHTML=str;
	}
	//---- 
	load_settings();
	setupWebGL();
	addEvents_panZoom_ToCanvasView(canvas);
	createGUI();
	colorize_listAll();
	patternBox_draw();
	
		


	//---- populate getFreq_mode_sel
	let setFrequency_src=setFrequency.toString();
	let setFrequency_src_cases = setFrequency_src.match(/case\s\'(.*?)\'/g);
	let str='';
	for(let i=0;i<setFrequency_src_cases.length;i++)
	{
		let s=setFrequency_src_cases[i].substring(6,setFrequency_src_cases[i].length-1);
		str+="<option value='"+s+"'>"+s+"</option>"
	}
	$('getFreq_mode_sel').innerHTML+=str;
	
	//---- populate fill_mode_sel
	let fill_src=fill_get_c.toString();
	let fill_src_cases = fill_src.match(/case\s\'(.*?)\'/g);
	str='';
	for(let i=0;i<fill_src_cases.length;i++)
	{
		let s=fill_src_cases[i].substring(6,fill_src_cases[i].length-1);
		str+="<option value='"+s+"'>"+s+"</option>"
	}
	$('fill_mode_sel').innerHTML+=str;
	fill_field();
	

	
	elementPos_load('pan','FIELDSET');

//-------- ant

	ant.antFunc=(typeof ss.a0!='undefined')?antFF[ss.a0]:antFF.RL;// TODO need to create all saved ants, not only set default 1
	ant_f.antFunc=(typeof ss.a0!='undefined')?antFF_f[ss.af0]:antFF_f.RL;
	new_ant(ant) //start with integer ant as it simpler and easy to make good audio
	freq_cursor.o=ants[0];
	//new_ant(ant_f)
}

function createGUI()
{//##
//var gui = new dat.GUI({ load: getPresetJSON(), preset: 'Preset1' });
//var gui = new dat.GUI();

//gui.remember(prop);
//gui.remember(ant);

/*
var f1 = gui.addFolder('ant');
f1.add(prop, 'antType',prop.antTypes);
f1.add(prop, 'bInt',0,1);
f1.add(prop, 'colorAdds0',-4.0,4.0).step(0.1); //!! checkbox int  //prop.bInt_?1:
f1.add(prop, 'colorAdds1',-4.0,4.0).step(0.1);
f1.add(prop, 'color_max',1,500).step(1);
f1.add(prop, 'dirAdds0',-4.0,4.0).step(0.002);
f1.add(prop, 'dirAdds1',-4.0,4.0).step(0.002);
f1.open();*/
}
</script>
<script>  //select function list
new_sel=$('new_antFunc_sel');
new_sel.addEventListener('mouseenter', select_ant_sel_dropdown);
new_sel.addEventListener('mouseleave', antFunc_sel_off);

function new_ant(o)
{
 let a=Object.create(o);
 a.x = tt.xc; 
 a.y = tt.yc; 
 ants.push(a);
 ant_selected_set(a)
 if(ant_selected.bFloatDir) dirM=4;
 recreate_ants_sel_list();
 new_sel.selectedIndex=ants.length-1;
}

var ants=[];


antFF_nm_list=  Object.getOwnPropertyNames(antFF).filter(function (p) {
	return typeof antFF[p] === 'function';
})


//@2 https://www.w3.org/TR/wai-aria-practices-1.1/examples/listbox/listbox-rearrangeable.html
var sel = $('antFunc_sel');
var fragment = document.createDocumentFragment();
antFF_nm_list.forEach(function(nm, index) {
	var opt = document.createElement('option');
	opt.innerHTML = nm;
	opt.value = nm;
	opt.id=nm
	fragment.appendChild(opt);
});
sel.appendChild(fragment);
sel.addEventListener('mouseenter', antFunc_sel_dropdown);
sel.addEventListener('mouseleave', antFunc_sel_off);


function antFunc_sel_dropdown(e){
e.target.setAttribute('size',e.target.length)
//e.target.style.zIndex=9999;//nw TODO fix
}
function antFunc_sel_off(e){
e.target.removeAttribute('size')
//e.target.style.zIndex=0;
}

function select_ant_sel_dropdown(e){
	e.target.setAttribute('size',e.target.length)
	e.target.style.zIndex=9;
}
function recreate_ants_sel_list()
{
	N=new_sel.selectedIndex;
	new_sel.innerHTML="";
	fragment = document.createDocumentFragment();
	for(let i=0;i<ants.length;i++)
	{
		var opt = document.createElement('option');
		let str_f=ants[i].bFloatDir?"f":"";
		let str=i+str_f+" "+ ants[i].antFunc.name; 		//console.log(str);
		opt.innerHTML = str;
		opt.value = i;
		opt.id=str
		fragment.appendChild(opt);
	}
	new_sel.appendChild(fragment);
	new_sel.selectedIndex=N;
}


function setantFunc(nm){
	if(!nm || !antFF[nm]) return;//###
	ant_selected.antFunc=antFF[nm]; //console.log(nm,antFF[nm]);
	bGUIupd=true;
	stt.a0=nm;
	bGUIupd=false;
	recreate_ants_sel_list();//###???
	//!upd ants list
}

function ant_selected_set(a){
	ant_selected=a; 
	$('ant_f_settings').style.display=ant_selected.bFloatPos?'block':'none';
}
function select_ant(e){
 ant_selected_set(ants[e.value])	//antFunc=antFF[nm]; 	//console.log(nm,antFF[e.id]);
}

function del_selected_ant(){
 ants.splice(ants.indexOf(a.antFunc.name), 1);
}


//$(antFF_nm_list[0])
</script>

<script> //loop
var canvas = $('canvas');
var canvasPlot = $('canvasPlot');

var lastX,lastY;
var dragEnd_dX=0;
var dragEnd_dY=0;
var lastX=1/2,lastY=1/2;

var dragStart,dragged;
var tt={}

function addEvents_panZoom_ToCanvasView(canvasView) //TODO dont faster than FPS
{	//console.log(ss.w,ss.h,lastX,lastY)
	lastX=canvasView.width/2; //mouse pos in canvas coord
	lastY=canvasView.height/2;
	tt.zoomOld=ss.zoom;
	tt.zoom_t=ss.zoom;

	canvasView.addEventListener('mousedown',function(evt){
		document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';
		
		if(evt.button === 0) //draw
		{
			tt.bDraw=true;
		}
		else
		//if(evt.button === 1) //middle btn
		{
			lastX = evt.offsetX || (evt.pageX - canvasView.offsetLeft);
			lastY = evt.offsetY || (evt.pageY - canvasView.offsetTop);
			dragStart =[lastX,lastY];// ctxView.transformedPoint(lastX,lastY);
		}
		
		dragged = false;
		evt.preventDefault();				
	},false);
	canvasView.addEventListener('mousemove',function(evt){
		lastX = evt.offsetX || (evt.pageX - canvasView.offsetLeft);
		lastY = evt.offsetY || (evt.pageY - canvasView.offsetTop);
		
		if(tt.bDraw) //draw
		{
			let x=Math.round((lastX*ss.zoom-ss.xx*canvasView.width)%ss.w);
			let y=Math.round((lastY*ss.zoom-ss.yy*canvasView.height)%ss.h);
			if(x<0)x+=ss.w;
			if(y<0)y+=ss.h;
			field[y*ss.w+x]=255;			//console.log(x,y)
		}
		else
		if (dragStart){
			//pt = ctxView.transformedPoint(lastX,lastY);
			//ctxView.translate(pt.x-dragStart.x,pt.y-dragStart.y);
			//redraw();
			stt.xx=(lastX-dragStart[0])/canvasView.width*ss.zoom+dragEnd_dX;
			stt.yy=(lastY-dragStart[1])/canvasView.height*ss.zoom+dragEnd_dY;	//console.log(ss.xx,ss.yy)
		}
		dragged = true;
				//console.log(lastX,lastY)
				//if(il%16==0)	URL_upd();
				//#fix position glitch on first down 
	},false);
	canvasView.addEventListener('mouseup',function(evt){
		dragStart = null;
		tt.bDraw=false
		if (!dragged) Zoom(evt.shiftKey ? -1 : 1 );
		else
		{
			dragEnd_dX=ss.xx;
			dragEnd_dY=ss.yy;
			//console.log(dragEnd_dX,dragEnd_dY)
			//URL_upd();
		}
		
		$('freq_cursor_xy_view').innerText=lastX+','+lastY
		freq_cursor_o_static.x=lastX;
		freq_cursor_o_static.y=lastY;
	},false);

	scaleFactor = 1.1;
	var Zoom = function(clicks){ //console.log(clicks)
		//pt = ctxView.transformedPoint(lastX,lastY);
		//ctxView.translate(pt.x,pt.y);
		var factor = Math.pow(scaleFactor,clicks);
		//ctxView.scale(factor,factor);
		//ctxView.translate(-pt.x,-pt.y);
		//redraw();
	}

	var handleScroll = function(evt){ //console.log(evt.wheelDelta, ss.zoom)
		tt.zoomOld=ss.zoom;
		
		tt.zoom_t*=evt.wheelDelta>0?0.9:1.1;	if(tt.zoom_t>0.9&&tt.zoom_t<1.1) stt.zoom=1; else stt.zoom=tt.zoom_t; //stabilize near 1x
		
		//zoom from cursor, but not from 0,0
		ss.xx+=lastX/canvasView.width*(ss.zoom-tt.zoomOld);
		ss.yy+=lastY/canvasView.height*(ss.zoom-tt.zoomOld);
		dragEnd_dX=ss.xx;
		dragEnd_dY=ss.yy;
	
		bNeed_URL_upd=true;
		//var delta = evt.wheelDelta ? evt.wheelDelta/40 : evt.detail ? -evt.detail : 0;
		//if (delta) Zoom(delta);
		return evt.preventDefault() && false;
	};
	canvasView.addEventListener('DOMMouseScroll',handleScroll,false);
	canvasView.addEventListener('mousewheel',handleScroll,false);
}


const gl = canvas.getContext("webgl", { alpha: false }); //if (!gl) {alert('no webgl')}

let programInfo = webglUtils.createProgramInfo(
   gl, [
` //================================== vs
attribute vec2 a_position;
attribute vec2 a_texCoord;

uniform vec2 u_resolution;
varying vec2 v_texCoord;

uniform float zoom;
uniform vec2 view_center;

void main() {
   vec2 zeroToOne = a_position /  vec2(u_resolution.x,u_resolution.y); // convert the rectangle from pixels to 0.0 to 1.0
   vec2 zeroToTwo = zeroToOne * 2.0; // convert from 0->1 to 0->2
   vec2 clipSpace = zeroToTwo - 1.0; // convert from 0->2 to -1->+1 (clipspace)

   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);

   // pass the texCoord to the fragment shader. The GPU will interpolate this value between points.
   v_texCoord = a_texCoord*zoom-view_center;
}
`
, //================================== ps
`
precision highp float;

uniform sampler2D u_image;
//uniform vec2 u_textureSize;
varying vec2 v_texCoord; //from the vertex shader

uniform float timestamp;
uniform float h_mul;
uniform float h_k0;
uniform float h_k1;
uniform float h_k2;
uniform float h_k3;
uniform float h_k4;
uniform float h_kBk; //0//min (black point)
uniform float h_kLi; //1//light max
uniform float clamp_limit;//1
uniform float clamp_rest;//0

uniform float zoom;

// All components are in the range [0…1], including hue.
vec3 hsv2rgb(vec3 c)
{
	//vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	//vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	//return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	vec4 K = vec4(h_k0, h_k1, h_k2, h_k3); //! TODO i want more palette control control, some gradients with 'stops'. And some with this bars
	vec3 p = abs(fract(c.xxx + K.xyz) * h_k4 - K.www);
	c=c.z * mix(K.xxx, clamp(p - K.xxx, h_kBk, h_kLi), c.y);

	c = mix(c, c*clamp_rest, step(clamp_limit,min(c.x,min(c.y,c.z))));	//=== if(c.x>limit && c.y>limit && c.z>limit) c*=clamp_rest; //replace whites with black
	return c;
}
/*
//TODO use (seems diff is small here), but it has to be better sometimes https://www.shadertoy.com/view/MsS3Wc
// Smooth HSV to RGB conversion 
vec3 hsv2rgb_smooth( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

	rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing	
    //rgb = rgb*rgb*rgb * (rgb * (rgb * 6.0 - 15.0) + 10.0); //Quintic smoothing
    //rgb = cos( (rgb + 1.0) * PI );//cosine
	
	return c.z * mix( vec3(1.0), rgb, c.y);
}

vec3 hsv2rgb_smooth( vec3 c ) //optimized
{
	return c.z * (1. - c.y * smoothstep(2.,1., abs( mod( c.x*6.+vec3(0,4,2), 6.) -3.) ));
}
*/
void main() {
/*
	vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;
	gl_FragColor = (
		 texture2D(u_image, v_texCoord) +
		texture2D(u_image, v_texCoord + vec2(onePixel.x, 0.0)) +
		texture2D(u_image, v_texCoord + vec2(-onePixel.x, 0.0))) / 3.0;
		*/
	   
	//gl_FragColor = vec4(v_texCoord.x, v_texCoord.y, 0, 1); 
	//c0=gl_FragColor.x;
	
	float c0=texture2D(u_image, v_texCoord).x;
	
	if(c0==0.)
	{
		gl_FragColor = vec4(0.,0.,0.,1.);
		return;
	}
	
	vec3 c=vec3(sin(c0*h_mul+timestamp),1.,1.);
	
	c=hsv2rgb(c);
	gl_FragColor = vec4(c,1.);
}

`
]);


//=============================================

let floatTextures = gl.getExtension('OES_texture_float'); if (!floatTextures) { alert('no floating point tex support');/*use color.r + color.g * 256.0f*/}
//,OES_texture_half_float //16b  

//=============================================

var texArr;

var dt_avg=10, dtAnt=20, dtDraw=20;
var bStop=true; //initial is stopped, because of need click to init audio
var il=0;
var upd_gui_i=0;
var timestamp=0;
var timestamp_t=0;
//changing by colorize modes:
var h_mul_mul=0.1;
var h_incr_mul=1;

var frameNID=-1;// №
let ant_dirAbs_last=0;
let ant_step_i_last=0;
//let bLog_uniform_k=0;

AntLastStep=0;
seq_detect_m=30;
seq_detected_shift=0;
seq_N=0;
function arrAntLastStepC_get_index(ih,AntLastStep)
{
	return (ih+AntLastStep)%arrAntLastStepC.length;
}

function loop(timestamp) {
timestamp=timestamp_t //!fix something increment this if delete this it will still increasing %\
timestamp_t+=ss.h_incr*h_incr_mul;
	var t0=window.performance.now();
	
	for (let i = 0; i < ss.speed; i++)
	{ //100000000 =10M=1s on opera2020  //310+35ms separate field arr

		for(let i=0;i<ants.length;i++)
		{
		 ants[i].run();
		 //bStop=true; //TODO single step mode press btn //sleep(500)
		}

		
		//detect seq TODO settings skip if not need,  not every step 
		arrAntLastStepC[AntLastStep]=field[ants[0].pos];
		AntLastStep++;if(AntLastStep>=arrAntLastStepC.length) AntLastStep=0;
		if(ss.showArr=='arrSeq') //as this is very slow
		{
			if(ss.speed>8000)ss.speed=8000;
			if(ants[0].step_i_real>arrAntLastStepC.length)
			{
				if(seq_detected_shift!=0){
					if(arrAntLastStepC[arrAntLastStepC_get_index(0,AntLastStep)]==arrAntLastStepC[arrAntLastStepC_get_index(0+seq_detected_shift,AntLastStep)])
					{
						arrSeq[ants[0].pos]=ants[0].step_i_real%seq_detected_shift;//TODO colorize start w same color, single color negative each seq_N;
						//arrVisits[ants[0].pos]=122;
					}
					else
					{
						seq_detected_shift=0;
						//arrVisits[ants[0].pos]=0;
					}
				}
				else
				{
					arrVisits[ants[0].pos]=0;
					for(ih=0,shift=seq_detect_m;;)
					{
						if(arrAntLastStepC[arrAntLastStepC_get_index(ih,AntLastStep)]!=arrAntLastStepC[arrAntLastStepC_get_index(ih+shift,AntLastStep)]){
							
							ih=0;shift++;
							if(shift>arrAntLastStepC.length/2) break;
						}
						else{
							if(ih==shift) {
								seq_detected_shift=shift;
								seq_N++;					console.log(seq_N, seq_detected_shift);
								break;
							}
							else
							ih++;
						}
					}
				}
			}
		}
		
	}
	if(fieldAdd>0)
	{
		for(let i=0;i<tt.wh;i++)
		{
			if( !ss.bfieldAdd_lim || (field[i]>0 || field[i]<=255) )
			{
				field[i]--;
			}
		}
	}
	var tA=window.performance.now();


for(let i=0;i<tt.wh;i++){
	if(ss.del_field_if_step_i>0 && arrHist[i]<ants[0].step_i_real-ss.del_field_if_step_i)
	{
		field[i]=0;
		arrHist[i]=0;//TODO settings
		arrVisits[i]=0;
		arrDir_last[i]=0;
		arrHistDir_E[i]=0;
		arrHistDirAbs[i]=0;
		arrHist_rotSpeed[i]=0;
	}
}
	switch(ss.showArr)
	{
		default:
		case 'field':
		h_mul_mul=0.005;
		h_incr_mul=0;

		//if(value==0&&buffer32[n]==0) continue; //skip unused @@@ TODO settings to skip outer BG pattern
		//if(value!=0&& buffer32[n]!=0) continue;


		for(let i=0;i<tt.wh;i++){
			texArr[i] = field[i];
			//if(arrVisits[i]<3){arrFirtsVisit[i] = field[i];} //only first @@@ try TODO
			//else {texArr[i]++}
		}
		break;
		
		case 'arrHist':
		h_mul_mul=0.001;
		h_incr_mul=10;
		for(let i=0;i<tt.wh;i++)
			texArr[i] = arrHist[i];
		break;
		case 'arrVisits':
		h_mul_mul=0.03;
		h_incr_mul=1;
		for(let i=0;i<tt.wh;i++)
			texArr[i] = arrVisits[i];
		break;

		case 'arrDir_last':
		h_mul_mul=0.01; //!!
		h_incr_mul=1;
		for(let i=0;i<tt.wh;i++)
			texArr[i] = arrDir_last[i];
		break;
		
		case 'arrHistDir_E':
		h_mul_mul=0.5;
		h_incr_mul=1;
		for(let i=0;i<tt.wh;i++)
			texArr[i] = arrHistDir_E[i];
		break;
		
		case 'arrHistDirAbs':
		h_mul_mul=0.1;
		h_incr_mul=1;
		for(let i=0;i<tt.wh;i++)
			texArr[i] = arrHistDirAbs[i];		
		break;	

		case 'arrHist_rotSpeed':
		h_mul_mul=0.1;
		h_incr_mul=0; //TODO but change with slider
		for(let i=0;i<tt.wh;i++)
			texArr[i] = arrHist_rotSpeed[i];
		break;
		
		case 'arrSeq':
		h_mul_mul=0.001;
		h_incr_mul=1;
		for(let i=0;i<tt.wh;i++)
			texArr[i] = arrSeq[i];		
		break;
	}

 //var rgbaTex = textureFromPixelArray(gl, texArr, gl.RGBA, ss.w, ss.h); //convert texArr to Uint8Array

if(il==0){
	resizeCanvasToDisplaySize(gl.canvas); //need every time after resize TODO2 resize wo reload . 
	gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); 		//console.log('viewport canvas',gl.canvas.width, gl.canvas.height); // Tell WebGL how to convert from clip space to pixels
	//https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html


  let textureField = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, textureField);

  let texWrap=gl.CLAMP_TO_EDGE;
  if(powerOf2(ss.w) && powerOf2(ss.h)) // can't have repeating non power of 2 textures, but CLAMP_TO_EDGE is allowed
  {
	texWrap=gl.REPEAT;
  }  else {   console.log('wrap disabled: NPOT texure size')  }
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, texWrap); //REPEAT CLAMP_TO_EDGE MIRRORED_REPEAT
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, texWrap); 
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
}


/* //supported array types
let tex_size = 256;


texAr=new Uint8Array(tex_size*tex_size);
fillArray(texAr, 1)
texAr=new Float32Array(tex_size*tex_size);
fillArray(texAr, 1)
function fillArray(arr, valPerPixel)
{
	for(let y=0, n=0;y<tex_size;y++){
		for(let x=0;x<tex_size;x++,n++) {
			arr[n*valPerPixel]=n;
			//arr[n*valPerPixel]=x+y;
		}
	}
}
*/
/*
let tex_size = 256;


texArr_8=new Uint8Array(tex_size*tex_size);
for(let y=0, n=0;y<tex_size;y++){
	for(let x=0;x<tex_size;x++,n++) {
		texArr_8[n]=x+y;
	}
}
		
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, ss.w, ss.h, 0, gl.RGBA, gl.UNSIGNED_BYTE, texArr); //working

texArr_RGBA8=new Uint8Array(tex_size*tex_size*4);
gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, ss.w, ss.h, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, texArr); //working


texArr_32F=new Float32Array(tex_size*tex_size);
gl.texImage2D(gl.TEXTURE_2D, 0, gl.R32F, ss.w, ss.h, 0, gl.R32F, gl.FLOAT, texArr); //Error  gl.FLOAT invalid type

texArr_RGBA32F=new Float32Array(tex_size*tex_size*4);
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, ss.w, ss.h, 0, gl.RGBA, gl.FLOAT, texArr); //Error  gl.FLOAT invalid type
*/
  // Upload the image into the texture.
  //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, ss.w, ss.h, 0, gl.RGBA, gl.UNSIGNED_BYTE, texArr); // new Uint8Array(texArr)
  //gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, ss.w, ss.h, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, new Uint8Array(texArr));
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, ss.w, ss.h, 0, gl.LUMINANCE, gl.FLOAT, texArr);
	
  gl.uniform1f(timestampId, timestamp);
  gl.uniform1f(h_mulId, ss.h_mul*h_mul_mul);
  gl.uniform1f(h_k0Id, ss.h_k0);
  gl.uniform1f(h_k1Id, ss.h_k1);
  gl.uniform1f(h_k2Id, ss.h_k2);
  gl.uniform1f(h_k3Id, ss.h_k3);
  gl.uniform1f(h_k4Id, ss.h_k4);
  gl.uniform1f(h_kBkId, ss.h_kBk);
  gl.uniform1f(h_kLiId, ss.h_kLi);
  gl.uniform1f(clamp_limitId, ss.clamp_limit);
  gl.uniform1f(clamp_restId, ss.clamp_rest);
  /*
  if(bLog_uniform_k)
  {
  console.log(ss.h_mul*h_mul_mul);
  console.log(ss.h_k0);
  console.log(ss.h_k1);
  console.log(ss.h_k2);
  console.log(ss.h_k3);
  console.log(ss.h_k4);
  console.log(ss.h_kBk);
  console.log(ss.h_kLi);
  console.log(ss.clamp_limit);
  console.log(ss.clamp_rest);
  bLog_uniform_k=0;
  } */
  if(ss.bAnim)
  {
	ss.x_anim+=ss.x_anim_incr;
	ss.y_anim+=ss.y_anim_incr;
	if(ss.z_anim_incr!=0){
		ss.z_anim+=ss.z_anim_incr;
		//zoom from cursor, but not from 0,0
		let dz=ss.z_anim_incr;
		ss.xx+=lastX/ss.w*dz;
		ss.yy+=lastY/ss.h*dz;
	}
	ss[ss.any_anim_nm]+=ss.any_anim_incr; //TODO any but not x,y,z
  }

  {
	gl.uniform2f(view_centerId, ss.xx+ss.x_anim,ss.yy+ss.y_anim);
	gl.uniform1f(zoomId, ss.zoom+ss.z_anim); //TODO zoom to  vec3 ^^ is opt?
  }
  //gl.uniform1i(texId, tar); //unnecessary

  gl.uniform2f(resolutionLocation, gl.canvas.width, gl.canvas.height);  //console.log('res canvas',gl.canvas.width, gl.canvas.height); // set the resolution
  gl.uniform2f(textureSizeLocation, ss.w, ss.h); //console.log('tex canvas',ss.w, stt.h); // set the size of the image
		 //console.log(gl.canvas.width,gl.canvas.height);
  
  // Draw the rectangle.
  gl.drawArrays(gl.TRIANGLES, 0, 6); //primitiveType offset count
  
  if(bAudioGen)
			setFrequency();
	
	dtAnt=dtAnt*0.9+(tA-t0)*0.1;
	dtDraw=dtDraw*0.9+(window.performance.now()-tA)*0.1;
	if(upd_gui_i==0)
	{
		if(bNeed_URL_upd) URL_upd();
		upd_gui_i=8; //upd freq
		let dt0=window.performance.now()-t0; dt_avg=Math.abs((dt0-dt_avg)/dt_avg)>0.2?dt0: dt_avg*0.95+(window.performance.now()-t0)*0.05;
		
		$('dtAnt').innerText=dtAnt.toFixed(1);
		$('dtDraw').innerText=dtDraw.toFixed(1);
		$('dirAbs').innerText=ant_selected.dirAbs.toFixed(4)
		$('step_i').innerText=ant_selected.step_i
		
		let crotSpeed=((ant_selected.dirAbs-ant_dirAbs_last)/(ant_selected.step_i-ant_step_i_last))
		$('rotSpeed').innerText=crotSpeed.toFixed(2)
		$('antrotSpeed').innerText=ant_selected.rotSpeed.toFixed(2)
		$('il').innerText=il
		
		ant_dirAbs_last=ant_selected.dirAbs;
		ant_step_i_last=ant_selected.step_i;
		

		
	}
	else upd_gui_i--;
	il++;
	
	if(!bStop)	frameNID=requestAnimationFrame(loop);
}

function reset_xyz(){
bGUIupd=true;
 stt.xx=0;
 stt.yy=0;
 lastX=0;
 lastY=0;
 stt.zoom=1;
 stt.x_anim=0;
 stt.y_anim=0;
 stt.z_anim=0;
 bGUIupd=false;
}

function swStartStop(b) //true to start.	undefined to toggle
{
	if(b===undefined)	bStop=!bStop;
	else bStop=!b;
	
	$tx('stop_sw',bStop?'start':'stop');
	
	if(bStop)
	{
		if(frameNID>=0) cancelAnimationFrame(frameNID);
	}
	else
	{
		frameNID=requestAnimationFrame(loop);
	}
	sw_audio(!bStop);
}

//=========================================== Audio
var osc=null;
var context;
var freq_avg=0;

//@@https://www.html5rocks.com/en/tutorials/getusermedia/intro/
function init_Audio(){
	if(ss.bAudioOFF==true || bStop) return; //as dont neeed if Stop or mutted
	context = new(window.AudioContext || window.webkitAudioContext)();
	osc = context.createOscillator(); 
	
	osc.type = 'sine'; // Sine is default. Also available: square, sawtooth and triangle waveforms.
	
	g = context.createGain();
	osc.connect(g);
	g.connect(context.destination);
	//osc.connect(context.destination); //== const osc = new Tone.Oscillator(440, "sine").toDestination().start();

	var now = context.currentTime;
	osc.frequency.setValueAtTime(440, now);
	osc.start(); 
}
/*
function voiceMute() {
  if(mute.id == "") {
    // 0 means mute. If you still hear something, make sure you haven't
    // connected your source into the output in addition to using the GainNode.
    gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
    mute.id = "activated";
    mute.textContent = "Unmute";
  } else {
    gainNode.gain.setValueAtTime(1, audioCtx.currentTime);
    mute.id = "";
    mute.textContent = "Mute";
  }
}
*/
 //this is not solving alert "The AudioContext was not allowed to start"
function sw_bAudioOFF(b){
	if(b===undefined || typeof b!="boolean") stt.bAudioOFF=!ss.bAudioOFF;
	else stt.bAudioOFF=b;
	
	bAudioOFF_updView();
	
	//----- disable if need
	if(ss.bAudioOFF)
	{
	 if(osc) osc.disconnect();
	 return;
	}	
	if(bStop) return;
	
	//----- enable
	sw_audio(true);
}

function sw_audio(b){ //TODO osc.start/stop insdead
 if(ss.bAudioOFF || !b){
	if(osc) osc.disconnect();
	bAudioGen=false;
 }
 else{
	if(!osc) init_Audio();
	osc.connect(context.destination); 
	bAudioGen=true;
 }
 //osc.start(now);
}

function bAudioOFF_updView(){
 if(ss.bAudioOFF) 
	$('audio_panel').classList.add('off');
 else
	$('audio_panel').classList.remove('off');
}


visit_last=0;
var freq_cursor_o_static={ //upd to last click pos
			x:0,
			y:0,
}
freq_cursor={
 o:freq_cursor_o_static,
 get pos(){
	return this.o.y*ss.w+this.o.x;
 },
 
 //xt:0,
 //yt:0,
}
function setFrequency()
{
/*
			let Timeout=dt0
			//let freq_new=30+Math.abs(ant_selected.rotSpeed)*ss.AudioFreqMul; //
			let freq_new=500+ant_selected.rotSpeed*ss.AudioFreqMul;	if(freq_new<30) freq_new=30+Math.abs(freq_new-30)
			if(freq_avg==0) freq_avg=freq_new;
			else 
			{
				freq_avg=freq_new;
				//if(freq_mode=='strict_dt'){
				//
				//	if(Math.abs(freq_avg-freq_new)<Timeout/8) //8hz/ms
				//			freq_avg=freq_avg;
				//	else 
				//	{
				//		if(Timeout>50)
				//			freq_avg=freq_avg*0.5+freq_new*0.5;
				//		else
				//			freq_avg=freq_avg*0.6+freq_new*0.4;
				//	}
				//}
			}
			osc.frequency.linearRampToValueAtTime(freq_avg,context.currentTime+Timeout/1000); $('AudioFreq').innerText=Math.floor(freq_avg);
			//freq_dirModule 1..512

			//TODO loop arr path. Loop queue
			//how old was visit
			//arr of ants
			*/
			
	let freq=0;
	let bfreq_cursor_toAnt=ss.bfreq_cursor_toAnt;
	//## fit freq to notes

	
	switch(ss.getFreq_mode)
	{
		case 'field': freq=field[freq_cursor.pos]; break; //by color
		case 'hist': freq=arrHist[freq_cursor.pos]; break; //by color
		
		case 'dir': freq=bfreq_cursor_toAnt ? ant_selected.dir : arrDir_last[freq_cursor.pos]; break;
		
		
		case 'dist_x': freq=ant_selected.x; break; //|  +ant_selected.y
		case 'dist_center': //distance from center
		{
			freq =Math.hypot(ant_selected.x-tt.xc, ant_selected.y-tt.yc);//static cursor has no sense
		}
		break;
		/*
		ca se 'dist_smooth': //distance from smooth xy = some kind of speed
		{
			freq =Math.hypot(ant.x-ant.xs, ant.y-ant.ys);
		}*/
		break;
		case 'speed': //speed_measured this work because setFrequency() called not every step
		{
			ant_selected.speed_measured=Math.hypot(ant_selected.x-ant_selected.xt, ant_selected.y-ant_selected.yt);
			ant_selected.xt=ant_selected.x;//TODO dt dstep
			ant_selected.yt=ant_selected.y;
			freq =ant_selected.speed_measured;
			//freq =Math.hypot(ant_selected.speed_measured-tt.xc, ant_selected.y-yx); //test this artef
		}
		break;
		case 'visit': //!! from datasetColor have to be set to visit
		{
			freq =arrVisits[freq_cursor.pos];
		}
		break;
		case 'visit_dif': //!! from datasetColor have to be set to visit
		{
			let v=arrVisits[freq_cursor.pos];
			freq =ant_selected.visit_last-v;
			ant_selected.visit_last=v;
		}
		break;
	}			//console.log(freq_cursor.o.x,freq_cursor.o.y,freq_cursor.pos, freq);

	
	if(freq_avg==0)
		freq_avg=freq;
	else{
		freq_avg=freq_avg*0.95+freq*0.05;
		}
		ffx=freq-freq_avg
	osc.frequency.value=(440*2+((freq-freq_avg)%4096)*ss.AudioFreqMul)%4096;//16384;

	//TODO settings quantize to notes, draw fxxs
	//osc.frequency.value=notes5[Math.round((440*2+((freq-freq_avg)%4096)*ss.AudioFreqMul*0.01))%16];
	
	
	$('freq_').innerText=freq;
	$('freq_avg_').innerText=freq_avg;
	$('ffx_').innerText=ffx;
	$('frequency_').innerText=osc.frequency.value;
	
	
	let ft=Math.round(osc.frequency.value/8); //console.log(ft, fxxs[ft])
	canvasPlotc.fillRect(ft, fxxs[ft]*2, 1, 2);
	fxxs[ft]++;
	
	//osc.frequency.value=60+(freq%ss.freq_dirModule)*ss.freq_rangeMult; //%4   Math.sin(ant.dir)*256;   //by dir
}
fxxs=new Float32Array(4096);//how often fx is used
freq_avg=0; //TODO settings, map to notes, midi
ffx=0;
//##const osc = new Tone.Oscillator(440, "sine").toDestination()
//=========================================== WebGL
function setupWebGL()
{
 // look up where the vertex data needs to go.
  const positionLocation = gl.getAttribLocation(programInfo.program, "a_position");
  const texcoordLocation = gl.getAttribLocation(programInfo.program, "a_texCoord");

  // Create a buffer to put three 2d clip space points in
  var positionBuffer = gl.createBuffer();

  // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  // Set a rectangle the same size as the image.
  setRectangle(gl, 0, 0, ss.w, ss.h);														//console.log(ss.w,ss.h);

  // provide texture coordinates for the rectangle.
  var texcoordBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
	  0.0,  0.0,
	  1.0,  0.0,
	  0.0,  1.0,
	  
	  0.0,  1.0,
	  1.0,  0.0,
	  1.0,  1.0,
  ]), gl.STATIC_DRAW);

  // Upload the image into the texture.
  //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

  // Clear the canvas
  //gl.clearColor(0, 0, 0, 0);
  //gl.clear(gl.COLOR_BUFFER_BIT);

  // Tell it to use our programInfo.program (pair of shaders)
  gl.useProgram(programInfo.program);

  // Turn on the position attribute
  gl.enableVertexAttribArray(positionLocation);
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

  // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)
  var size = 2;		  // 2 components per iteration
  var type = gl.FLOAT;   // the data is 32bit floats
  var normalize = false; // don't normalize the data
  var stride = 0;		// 0 = move forward size * sizeof(type) each iteration to get the next position
  var offset = 0;		// start at the beginning of the buffer
  gl.vertexAttribPointer(positionLocation, size, type, normalize, stride, offset);

  // Turn on the texcoord attribute
  gl.enableVertexAttribArray(texcoordLocation);
  gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
  

  // Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)
  var size = 2;		  // 2 components per iteration
  var type = gl.FLOAT;   // the data is 32bit floats
  var normalize = false; // don't normalize the data
  var stride = 0;		// 0 = move forward size * sizeof(type) each iteration to get the next position
  var offset = 0;		// start at the beginning of the buffer
  gl.vertexAttribPointer( texcoordLocation, size, type, normalize, stride, offset);

}
  // lookup uniforms
  const resolutionLocation = gl.getUniformLocation(programInfo.program, "u_resolution");
  const textureSizeLocation = gl.getUniformLocation(programInfo.program, "u_textureSize");
  
  const texId = gl.getUniformLocation(programInfo.program, 'u_image');
  const timestampId = gl.getUniformLocation(programInfo.program, 'timestamp');
  const h_mulId = gl.getUniformLocation(programInfo.program, 'h_mul');
  const h_k0Id = gl.getUniformLocation(programInfo.program, 'h_k0');
  const h_k1Id = gl.getUniformLocation(programInfo.program, 'h_k1');
  const h_k2Id = gl.getUniformLocation(programInfo.program, 'h_k2');
  const h_k3Id = gl.getUniformLocation(programInfo.program, 'h_k3');
  const h_k4Id = gl.getUniformLocation(programInfo.program, 'h_k4');
  const h_kBkId = gl.getUniformLocation(programInfo.program, 'h_kBk');
  const h_kLiId = gl.getUniformLocation(programInfo.program, 'h_kLi');
  const clamp_limitId = gl.getUniformLocation(programInfo.program, 'clamp_limit');
  const clamp_restId = gl.getUniformLocation(programInfo.program, 'clamp_rest');
  const zoomId = gl.getUniformLocation(programInfo.program, 'zoom');
  const view_centerId = gl.getUniformLocation(programInfo.program, 'view_center');
  
function setRectangle(gl, x, y, width, height) {
  var x1 = x;
  var x2 = x + width;
  var y1 = y;
  var y2 = y + height;
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
	 x1, y1,
	 x2, y1,
	 x1, y2,
	 x1, y2,
	 x2, y1,
	 x2, y2,
  ]), gl.STATIC_DRAW);
}
/*
function textureFromPixelArray(gl, dataArray, type, width, height) { //from arr, from  image https://stackoverflow.com/questions/9046643/webgl-create-texture
	var dataTypedArray = new Uint8Array(dataArray); // Don't need to do this if the data is already in a typed array
	var texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, texture);
	gl.texImage2D(gl.TEXTURE_2D, 0, type, width, height, 0, type, gl.UNSIGNED_BYTE, dataTypedArray);
	// Turn off mips and set  wrapping to clamp to edge so it  will work regardless of the dimensions of the video.
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST); //gl.NEAREST
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	// Other texture setup here, like filter modes and mipmap generation
	return texture;
}
*/

function resizeCanvasToDisplaySize(canvas) {
	// Lookup the size the browser is displaying the canvas in CSS pixels.
	const displayWidth  = canvas.clientWidth;
	const displayHeight = canvas.clientHeight;

	// Check if the canvas is not the same size.
	const needResize = canvas.width  !== displayWidth ||
					   canvas.height !== displayHeight;

	if (needResize) {
	  // Make the canvas the same size
	  canvas.width  = displayWidth;
	  canvas.height = displayHeight;
	}
}	


</script>

</body>
</html>